Clase 2 üöÄ
Que es un componente üëÅ‚Äçüó®
Los componente son elementos reutilizables para React.

Elementos del Proyecto
Readme
Nos da informaci√≥n basica del proyecto, datos tecnicos, librerias configuraci√≥n

Package.json
Nos muestra dependencias, scripts (funciones a ejecutar), configuraciones (eslint es una libreria que nos ayuda a corregir errores de sintaxis o escritura de codigo), browserlist (ayuda a transpilar el proyecto como servidor :3000).

.gitignore
Configuraci√≥n de git para limitar archivos y carpetas a ser subidos al repositorio.

Carpeta public
Carpeta que contiene elementos publicos que seran accedidos por el navegador.
El dato esencial de React es que utiliza una plantilla base de HTML (index.html) con una etiqueta div dentro de body, esta etiqueta div tiene id=root (por lo general) y a travez de esta es que renderizamos todo el proyecto en react.

Adicionalmente el HEAD del archivo index.html tenemos estilos y el manifest que es el que nos ayudar√° a hacer pwa (paginas instalables en ordenadores incluso offline).

Carpeta src
El archivo principal es index.js donde importamos todos los estilos y exportamos un componente App.js. Dentro de App.js importamos los estilos asignados al componente App.css luego encontramos una funci√≥n con nombre iniciado con mayuscula por convenci√≥n que puede o no recibir un parametro, dentro del return podemos ejecutar codigo jsx bajo la nomenclatura de react.

Adicionalmente podemos crear carpetas con una arquitectura con buenas practicas (hooks, services, api, etc.).

Creamos un componente
Dentro de App antes del export:

function TodoItem() {
  return (
    <li>
      <span>V</span>
      <p>Llorar con la Lorona</p>
      <span>X</span>
    </li>
  );
}
Y en el componente App, luego del primer className:

<TodoItem />
Luego de verificar la aplicaci√≥n en el navegador, podemos aclarar que bajo un metood render (root.render([<TodoCount />])) podemos renderizar cuantas veces querramos componentes y utilizando props (propiedades) esta se utilizan como propiedades HTML:

<TodoCount completed={3} total={5} />
Diferencia de componente y elemento
La funcion que empieza con mayuscula es un componente que reciben propiedades y no renderizan nada en el html, los elementos estan dentro de componente que luego se convertiran en html y estos procesan las propiedades recibidas.

React DOM
Es el mecanismo de procesamiento donde ingresan los componentes y elementos de React y salen etiquetas HTML en la pagina hacia el usuario final.



Clase N¬∞4: ¬øcomo se comunican los componentes? props y atributos:

Componentes => Reciben Propiedades.
Elementos => Reciben Atributos.
‚Ä¶
Hay que tener en cuenta que en JSX, la sintaxis entre atributos y propiedades es muy parecida, ya que escribimos el valor de las props en los componentes como si fueran atributos, pero estos no lo son‚Ä¶
‚Ä¶
Las props son variables que declaramos en nuestro componente como si fueran par√°metros de una funci√≥n, podemos declarar una unica (Prop) o declarar varias Props utilizando la {Desestructuraci√≥n}.
Para luego posteriormente darles un valor como si fueran argumentos, pero utilizando otro tipo de sintaxis, que es muy parecida a la de los atributos de los elementos HTML, con la diferencia que el otorgamos el valor entre {llaves}.
‚Ä¶
En cuanto a la propiedad ‚Äúprops.children‚Äù esta hace referencia a que React transforma autom√°ticamente a todo lo que se encuentre dentro del componente padre en un elemento ‚Äúchildren‚Äù , es decir todo lo que se encuentre dentro de una etiqueta de apertura <Component> y una etiqueta de cierre </Component> para React ser√° ‚ÄúChildren‚Äù.
‚Ä¶
Por otro lado existe <React.Fragment> o su sintaxis m√°s corta " <> </> " que es un contenedor invisible que tiene como objetivo envolver todos los componentes JSX dentro de un contenedor padre, esto es debido a que React necesita envolver esos componentes para renderizarlos, y asi no crear nodos innecesarios en el DOM.
‚Ä¶
Por ultimo, debemos tener en cuenta que podemos renderizar elementos a trav√©s de un Array, utilizando en este caso el metodo .map(), y devolviendo el componente ‚ÄúTodoItem‚Äù por cada uno de los objetos del array‚Ä¶
Es necesario que le pasemos las props ‚Äúkey={todo.text} text={todo.text}‚Äù al componente para que nos muestre un contenido distinto por cada objeto de este array.
‚Ä¶
La prop ‚ÄúKey‚Äù funciona como un Identificador para objeto del array y es necesaria cuando utilizamos el metodo .map()


Clase 6 - Evenctos en React: onClick, onChange
Los eventos nos sirven para detectar acciones del usuario en interaccio√≥n con nuestra aplicaci√≥n. Estos eventos en React deben ser con CamelCase onCLick esto es un addEventListener.

Para poder ejecutar estos eventos en React, se deben usar arrow functions con la estructura () => {} de esta manera React entiende y no ejecuta de manera inmediata las funciones.

<input type="search" placeholder="Search..."
        onChange={(event) => {
          console.log('Escribiste en el Todo Search')
          console.log(event)
          console.log(event.target);
          console.log(event.target.value);
        }} />
Dentro del fragmento de codigo podemos mostrar por consola el evento con las diferentes propiedades que necesitaremos en el buscador o para crear nuevos ToDo‚Äôs.

El evento como tal nos muestra la propiedad SyntheticBaseEvent que es contenedor de todas las propiedades del evento, siendo mas sepecifico target que nos muestra el elemento con el cual se esta interactuando y finalmente value que especificamente y en tiempo real nos muestra el valor enviado por el evento.


Clase 7 Que es el estado?
El estado en React, tambi√©n conocido como state, es el segundo tipo de dato que maneja esta librer√≠a de JavaScript. Mientras que las props son los datos que podemos pasarle a un componente o elemento React desde afuera, un estado se conforma por los datos internos que un componente puede manejar. keepcoding.

Creaci√≥n de un estado
Primero se debe importar el estado desde React:

import React from "react";
Luego definimos la constante a la cual le asignaremos el estado:

const [searchValue, setSearchValue] = React.useState(); // Es una funci√≥n por eso los ()
Este estado es inmutable, por lo tanto es una funcion controladora de estados. Por convenci√≥n debe utilizar los dos parametros el primero es un controlador de estados y el segundo parametro actualizador enviado por useState. (Estos pueden cambiar de acuerdo a lo que se necesita).

Luego necesitaremos un valor inicial que lo enviaremos al ejecutar la funci√≥n useState("") y este lo conectaremos con el input enviandole la propiedad value={searchValue}.

Ahora bien, para evitar errores una vez renderizados los componentes necesitamos enviar un valor por defecto al input de tipo search y dentro del evento onChange utilizamos el valor del texto ingresado por el usuario:

onChange={(event) => {
  setSearchValue(event.target.value);
}}
Render React - DOM Virtual
El render y el re render de React es una ejecuci√≥n del motor de React automaticamente cuando detecta que el actualizador useState a cambiado. El motor de react crea un Virtual DOM el mismo que se compara con el DOM del navegador y unicamente re renderiza los componentes que que son diferentes. de esta forma funciona el motor de React


Clase 8 - Contando TODO‚Äôs

Comunicacion entre componentes padres e hijos. Los estod sunicamente pueden compartirse entre padres e hijos.

Necesitamos combinar los estados con los props, los estados deben estar en el componente padre, para esto cortaremos el codigo del componente TodoSearch:

const [searchValue, setSearchValue] = React.useState('');
Y lo pegamos en el componente App por ser este el padre, ahora en el componente App invocamos el componente TodoSearch pero debemos enviarle como props el estado y su actualizador:

<TodoSearch 
  searchValue={searchValue}
  setSearchValue={setSearchValue}
/>
Ahora debemos destructurar las props desde el componente TodoSearch:

TodoSearch({
  searchValue,
  setSearchValue,
})
Una vez pegado el codigo, podemos ver el resultado con un console.log:
Output devtools:

Los usuarios buscan todos del
Los usuarios buscan todos dela
Los usuarios buscan todos de las
Ahora para utilizar los datos en JS definimos una constante:

const [todos, setTodos] = React.useState(defaultTodos);
Definimos por defecto el array inicial dentro de useState. Luego definimos dos constantes para los Todos completados y el total de todos:

const completedTodos = todos.filter(
  todo => !!todo.completed
  ).length;
const totalTodos = todos.length;
Dentro de este codigo definimos una constante completeTodos bajo el estado todos de useState donde debemos filtrar los todos completados para eso la manipulamos el array con filter y le decimos a React que manejaremos valores Bool con la doble admiraci√≥n por delante de la propiedad !!todo.completeEsto con la finalidad de usar True o False, finalmente utilizamos lenght para definir la longitud del array.

Finalmente enviamos estas props al componente App:

<TodoCounter 
  completed={completedTodos}
  total={totalTodos} 
/>
Y listo nos muestra los completados y los totales.



Clase 9 - Buscando TODO‚Äôs


Para esta clase utilizaremos estados derivados, por lo tanto definimos una constante:

const searchedTodos = todos.filter(
  (todo) => {
    return todo.text.include(searchValue)
  }
)
Aqui lo que hacemos es buscar dentro de los textos de los todos el valor de searchValue creando un nuevo array con las coincidencias.

Luego debemos cambiar el comportamiento de del componente TodoList para que trabaje con el nuevo array, cambiando el defaultTodos con searchedTodos:

<TodoList>
  {searchedTodos.map(todo => (
    <TodoItem
      key={todo.text}
      text={todo.text}
      completed={todo.completed}
    />
  ))}
</TodoList>
Esto ya funciona, pero tiene un detalle no reconoce mayusculas o minusculas de acuerdo como busquemos, asi que lo que haremos es optimizar la busqueda para que del lado de la logica comvierta todo el texto en minusculas:

const searchedTodos = todos.filter(
  (todo) => {
    return todo.text.toLowerCase().include(searchValue.toLowerCase())
  }
)
Ahora optimizamos el codigo:

const searchedTodos = todos.filter(
  (todo) => {
    const todoText = todo.text.toLowerCase();
    const searchText = searchValue.toLowerCase();
    return todoText.includes(searchText);
  }
)

Clase n¬∞13:

LocalStorage es una forma de almacenar datos en el navegador web, que persisten a√∫n despu√©s de que el usuario haya cerrado la ventana o salido del sitio web. Es √∫til para guardar informaci√≥n del usuario, como preferencias, configuraciones, entre otros.
.
Los m√©todos m√°s comunes de LocalStorage son:
.
localStorage.setItem(key, value): Agrega un elemento con una clave y un valor al almacenamiento local.
localStorage.getItem(key): Recupera el valor de la clave especificada en el almacenamiento local.
localStorage.removeItem(key): Remueve un elemento del almacenamiento local seg√∫n su clave.
localStorage.clear(): Borra todos los elementos del almacenamiento local.

clase 14: 

HOOKS
Los hooks son funciones que puedes llamar dentro de componentes funcionales para agregar y manipular caracter√≠sticas de React, como el estado, el ciclo de vida y los efectos secundarios. Los hooks m√°s comunes son useState, useEffect y useContext, pero tambi√©n puedes crear tus propios hooks personalizados.

Los Hooks son m√°s restrictivos que las funciones regulares. Solo puedes llamar a los Hooks en el primer nivel de tus componentes (u otros Hooks). Si quisieras utilizar useState en una condicional o en un bucle, extrae un nuevo componente y ponlo ah√≠.

CUSTOM HOOKS
React viene con varios Hooks integrados como useState, useContext y useEffect. A veces, desear√°s que haya un Hook para alg√∫n prop√≥sito m√°s espec√≠fico: por ejemplo, para obtener datos, para mantener un seguimiento de si un usuario est√° conectado o para conectarse a una sala de chat. Es posible que no encuentres estos Hooks en React, pero puedes crear tus propios Hooks para las necesidades de tu aplicaci√≥n.

Permite: compartir logica entre componentes y tener el codigo del componente como tal mucho mas limpio
Al abstraer usando Hooks nos facilita la lectura del codigo, teniendo las partes que le competen al componente en una seccion y las partes de la funcionalidad del hook en otra diferente.
Cuando vale la pena implementarlo? Bajo nuestro criterio cuando veamos necesario abstraer una logica.

clase 18: Efectos en React:

PROBLEMA: LOGICA PESADA
Hay partes de la logica de nuestros componentes que son mas complejas o pesadas. Podemos tener momentos donde partes de esa logica pueden demorarse algunos segundos (consultas a API, condicionales, etc).

Al tener que volver a renderizar nuestro componente, toda la logica, incluso la complicada tiene que volver a renderizarse y por tanto repetir esa logica pesada.

Si esa logica solo teniamos que aplicarla una vez, la primera renderizada, lo mejor es no tener que volverla a realizar.

SOLUCION: EFECTOS EN REACT
Los efectos son una herramienta que nos permite encapsular una logica pesada o demorada y protegerlos para que unicamente se ejecuten cuando lo necesitamos.

Al iniciar la pagina por primera vez se ejecutan todas las funciones, pero al cambiar el estado no siempre se va a volver a correr el codigo dentro del useEffect, sino que este se volver a correr unicamente cuando cambie un estado especifico que le digamos.

Ejemplo usando console.log

Tenemos dentro de la logica de nuestro componente estas tres funciones de ejemplo. Una dentro de el useEffect y dos por fuera.

console.log(1)
React.useEffect(()=>{
		console.log(2)
})
console.log(3)
Los tres log aparecen, pero el ultimo en aparecer es el log 2. Al encapsularlo en el efecto: se ejecuta al final.

React.useEffect recibe como primer argumento una funcion que es la logica pesada. Como segundo argumento recibe un Array, si le pasamos un Array vacio y actualizamos cualquier estado no va a volver a correr ese codigo al renderizar. Si por otro lado el Array contiene un estado o varios estados, entonces la logica se volvera a correr unicamente cuando el render sea ocasionado por cambios en esos estados que especificamos dentor del Array.

Puede ser cualquier estado, bien sea un estado como tal o un estado derivado.

CUAL ES EL USO DEL EFECTO?
Por ejemplo si tenemos un componente que debe cargar una informacion mediante una API de manera asincrona, esta informacion tarda en llegar y mientras tanto, que pasa con nuestro componente? El usuario que observa? un mensaje cargando, un icono?

En cambio, si usamos el efecto podemos encapsular el llamado a la API, para que ocurra al final una vez se ha cargado por primera vez nuestro componente y llame un re-renderizado para que cambie nuestro mensaje temporal de cargando‚Ä¶. por la informacion necesaria.

Ademas al pasarle el Array vacio no haremos nuevos llamados innecesarios a la API